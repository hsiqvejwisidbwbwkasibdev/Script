local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/hsiqvejwisidbwbwkasibdev/Script/main/Orion", true))()
local Window = OrionLib:MakeWindow({Name = "A Universal Time", TestMode = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Windows

local Tab = Window:MakeTab({
	Name = "Autofarm",
	Icon = "rbxassetid://4483345998",
	TestersOnly = false
})

local Tab1 = Window:MakeTab({
	Name = "Keybind",
	Icon = "rbxassetid://7733965118",
	TestersOnly = false
})

local Tab2 = Window:MakeTab({
	Name = "Visual",
	Icon = "rbxassetid://7733964126",
	TestersOnly = false
})



-- Sections

local Autofarm = Tab:AddSection({
	Name = "Autofarm"
})

local Keybind = Tab1:AddSection({
	Name = "Keybind"
})

local Visual = Tab2:AddSection({
	Name = "Visual"
})


-- Autofarm

Autofarm:AddToggle({
	Name = "Autofarm Zoro",
	Default = false,
	Callback = function(t)
        getgenv().Zoro = t
        while true do
            if not getgenv().Zoro then return end
            game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.DialogueService.RF.CheckDialogue:InvokeServer("Zoros_Swords_Adventure")
            game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.AdventureService.RF.PickedUpSword:InvokeServer()
           end
	end    
})

Autofarm:AddToggle({
	Name = "Auto Ascend",
	Default = false,
	Callback = function(b)
        getgenv().Ascend = b
        while true do
            if not getgenv().Ascend then return end
            game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.LevelService.RF.AscendAbility:InvokeServer(i == 1,300)
        end
    end
})

Autofarm:AddToggle({
	Name = "Autofarm Curses",
	Default = false,
	Callback = function(s)
        getgenv().Sigma = s
        if not getgenv().Sigma then return end
        _G.configurations = {
            switch = a, -- toggle farm with true = on / false = off
            farmlocation = "desert", -- desert / centercity
            autosell = true,
            sellinterval = 300, -- in seconds
            autoascend = true,
            autostats = true,
        }
        loadstring(game:HttpGet("https://polarsblade.xyz/scripts/auniversaltime"))()
    end
})

Autofarm:AddButton({
	Name = "Claim Daily Rewards",
	Callback = function(U)
        getgenv().ClaimDaily = U 
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(300)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(900)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(1800)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(2700)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(3600)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(5400)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(7200)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(9000)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(10800)
        game:GetService("ReplicatedStorage").ReplicatedModules.KnitPackage.Knit.Services.ShopService.RF.ClaimPlaytimeReward:InvokeServer(14400)      
  	end    
})

-- Keybinds

Keybind:AddToggle({
	Name = "Use R",
	Default = false,
	Callback = function(R)
    getgenv().UseR = R
    while true do
        if not getgenv().UseR then return end
    game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.E,false,game)
    wait(0.1) 
   end
end
})

Keybind:AddToggle({
	Name = "Use Q",
	Default = false,
	Callback = function(Q)
    getgenv().UseQ = Q
    while true do
        if not getgenv().UseQ then return end
    game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.E,false,game)
    wait(0.1) 
   end
end
})

Keybind:AddToggle({
	Name = "Use G",
	Default = false,
	Callback = function(G)
    getgenv().UseG = G
    while true do
        if not getgenv().UseG then return end
    game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.E,false,game)
    wait(0.1) 
   end
end
})

Keybind:AddToggle({
	Name = "Use Y",
	Default = false,
	Callback = function(Y)
    getgenv().UseY = Y
    while true do
        if not getgenv().UseY then return end
    game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.E,false,game)
    wait(0.1) 
   end
end
})

Keybind:AddToggle({
	Name = "Use E",
	Default = false,
	Callback = function(E)
    getgenv().UseE = E
    while true do
        if not getgenv().UseE then return end
    game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.E,false,game)
    wait(0.1) 
   end
end
})

-- Visuals

Visual:AddToggle({
	Name = "Remove Chest UI",
	Default = false,
	Callback = function(J)
    getgenv().ChestRollUI = J 
    while true do
        if not getgenv().ChestRollUI then return end
        game:GetService("Players").LocalPlayer.PlayerGui.UI.Gameplay.ChestRoll:Destroy()
   end
end
})
